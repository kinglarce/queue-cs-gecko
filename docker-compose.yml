services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_SUPABASE_URL=${REACT_APP_SUPABASE_URL}
        - REACT_APP_SUPABASE_ANON_KEY=${REACT_APP_SUPABASE_ANON_KEY}
        - REACT_APP_TITLE=${REACT_APP_TITLE}
        - REACT_APP_VERSION=${REACT_APP_VERSION}
        - REACT_APP_API_TIMEOUT=${REACT_APP_API_TIMEOUT}
        - REACT_APP_ENABLE_NOTIFICATIONS=${REACT_APP_ENABLE_NOTIFICATIONS}
        - REACT_APP_ENABLE_SMS_NOTIFICATIONS=${REACT_APP_ENABLE_SMS_NOTIFICATIONS}
        - REACT_APP_ENABLE_DARK_MODE=${REACT_APP_ENABLE_DARK_MODE}
        - REACT_APP_DEFAULT_WAIT_TIME_PER_PERSON=${REACT_APP_DEFAULT_WAIT_TIME_PER_PERSON}
        - REACT_APP_USE_MOCK_API=${REACT_APP_USE_MOCK_API}
    image: cs-gecko-queue-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules   # This ensures node_modules in the container is not overwritten
    environment:
      - NODE_ENV=development
      - REACT_APP_USE_MOCK_API=${REACT_APP_USE_MOCK_API}
      - REACT_APP_SUPABASE_URL=${REACT_APP_SUPABASE_URL}
      - REACT_APP_SUPABASE_ANON_KEY=${REACT_APP_SUPABASE_ANON_KEY}
      - REACT_APP_TITLE=${REACT_APP_TITLE}
      - REACT_APP_VERSION=${REACT_APP_VERSION}
      - REACT_APP_API_TIMEOUT=${REACT_APP_API_TIMEOUT}
      - REACT_APP_ENABLE_NOTIFICATIONS=${REACT_APP_ENABLE_NOTIFICATIONS}
      - REACT_APP_ENABLE_SMS_NOTIFICATIONS=${REACT_APP_ENABLE_SMS_NOTIFICATIONS}
      - REACT_APP_ENABLE_DARK_MODE=${REACT_APP_ENABLE_DARK_MODE}
      - REACT_APP_DEFAULT_WAIT_TIME_PER_PERSON=${REACT_APP_DEFAULT_WAIT_TIME_PER_PERSON}
      - CHOKIDAR_USEPOLLING=true  # This helps with file watching in Docker
      - WDS_SOCKET_PORT=0         # This helps WebpackDevServer run correctly in Docker
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      postgres:
        condition: service_healthy
      supabase:
        condition: service_started
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:14
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./supabase/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./supabase/postgres.conf:/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Supabase API
  supabase:
    image: supabase/supabase-dev:latest
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    ports:
      - "8000:8000"   # REST API
      - "9000:9000"   # Dashboard
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_PORT: 8000
      SUPABASE_REST_PORT: 8000
      KONG_PORT: 8000
      STUDIO_PORT: 9000
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      JWT_SECRET: ${JWT_SECRET}
      PGRST_JWT_SECRET: ${JWT_SECRET}
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/rest/v1/"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Nginx service for reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d/default.conf.template:/etc/nginx/templates/default.conf.template
    environment:
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
    depends_on:
      - frontend
      - supabase
    restart: unless-stopped

volumes:
  pg_data: 